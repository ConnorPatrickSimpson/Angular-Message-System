Matthew Ecker IM Research

I have very little experience in this area, so my research may be vague or downright wrong.




=========
BACK-END
=========
Taking Matt's suggestion of IIS for Windows Server and the SignalR library for ASP.NET looks
like the best idea. SignalR includes native support for "bi-directional communication between
server and client".

http://www.asp.net/signalr

SuperWebSocket is a .NET WebSocket Server we could use for real-time connections, and includes
support for SSL/TLS encryption.

http://superwebsocket.codeplex.com/

Otto:

I’ve never dealt with this directly but a bit of research reveals that the IM problem is not overwhelmingly difficult. The  problem of communicating this way has been around since the 70’s and so has it’s solutions.  
There exist various backend architectures and frameworks that handle building custom IM applications. We also have several high profile examples like WhatsApp, Hipchat, Slack, MSN, Yahoo!, Google Messaging. (Some of which explain architectural decisions in technical blogs)   

If you google “XMPP framework” you’ll be likely to find something fitting for .NET or OpenSource solutions to the IM problem. Extensible Messaging and Presence Protocol, handles the issues of understanding wether others users are present(IE “Active”, “Busy”, “Offline”), as well as handling the actual chatting portion of the application. Using an established XMPP framework will make our project a lot easier.  
  
To learn more about XMPP. Read this pdf where it is discussed in a bit greater detail:
http://www.ldelgado.es/seguridad/crypt4you/curso_comunicaciones_digitales/documentacion/im_architectures_and_concepts.pdf


Considerations we may have to make would be centered around wether all communication is delegated to a central server(WhatsApp)[1], or via P2P(Skype)[2].  We should also take a look at how chat clients that run on .NET frameworks handle IM[4]. 
Microsoft seems to support its own sort of proprietary Notification and Messaging protocols it uses for Skype. I’m not yet sure wether we can access a framework that enables us to use those protocols.    

The choice we make here-on is open-ended and just as ambiguous as dealing with the alternative project. My preliminary research was conducted to probe for the availability of reference materials, papers, and open-source materials.  
Open source IM clones exist, as well as reference materials describing, for example, how an IM client can scale to millions of concurrent connections to a single box[3].

Reffs::
[1] http://www.quora.com/Instant-Messaging/What-is-WhatsApps-architecture-1
[2] https://en.wikipedia.org/wiki/Skype_protocol
[3] https://vimeo.com/44312354  
[4] http://stackoverflow.com/questions/4210316/opensource-net-jabber-xmpp-server

============
FRONT-END
============
I would prefer to build the front-end in AngularJS, but we can discuss the specifics for the
web client. 

Otto:
I’m not sure about the front end. My gut tells me develop natively for Android(primarily because Im familiar with that technology than I am with developing web-clients). One of the Aprima people suggested Xamarin; a framework that can build for Windows, Android, iOS and possibly Tizen devices